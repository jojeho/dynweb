---
import OpenAI from "openai";
export const partial = true;
// console.log(process.env)
function countTokens(text: string): number {
    // 공백을 기준으로 텍스트를 나눠 토큰으로 간주
    const tokens = text.split(/\s+/);

    // 빈 문자열을 필터링
    const nonEmptyTokens = tokens.filter(token => token.trim() !== '');

    return nonEmptyTokens.length;
}

// 예제 사용


function extractHtmlCssCode(text: string): string[] {
    const htmlCssRegex =
        /<style[^>]*>[\s\S]*?<\/style>|<script[^>]*>[\s\S]*?<\/script>|<[^>]+>|{[^}]+}/g;
    const matches = text.match(htmlCssRegex);

    if (!matches) {
        return [];
    }

    return matches;
}

const openai = new OpenAI({
    apiKey: "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",
});

async function main() {
    const completion = await openai.chat.completions.create({
        messages: [
            { role: "system", content: "You are a helpful assistant." },
            { role: "user", content: "Who won the world series in 2020?" },
            {
                role: "assistant",
                content:
                    "The Los Angeles Dodgers won the World Series in 2020.",
            },
            { role: "user", content: "Where was it played?" },
        ],
        // model: "gpt-3.5-turbo",
        model: "gpt-4.0",
    });

    console.log(completion.choices[0]);
}

async function prompt(message: string) {
    const completion = await openai.chat.completions.create({
        messages: [{ role: "user", content: message }],
       model: "gpt-3.5-turbo",
// model: "gpt-4.0`",
    });
    console.log(completion.choices[0]);
}

const q = Astro.url.searchParams.get("q");
const sampleText = "This is an example text with several tokens.";
const tokenCount = countTokens(q);
console.log("Token count:", tokenCount);


// .then((chunk) =>console.log(chunk));

// await prompt(message);
console.log('start')
const streamData = await prompt(q)
console.log('finish')

console.log(streamData)
const code = extractHtmlCssCode(streamData).join("");
console.log("------");
console.log(code);
console.log("------");
---

<div style="display: flex; justify-content: center;
            flex-direction: column;
">
    <!-- <pre
        class="javascript"
        style="flex: 1;">
      <code>{streamData}</code>
    </pre> -->

    <div>code result </div>
    <pre><code>{code}</code></pre>

    <div style="flex: 1;">html reesult</div>
    <Fragment set:html={streamData} />
</div>

</div>

<script>
    hljs.initHighlightingOnLoad();
</script>
